%%
headers
#define NO_IMPORT_PYGOBJECT
#include <pygobject.h>
#include <pygtk/pygtk.h>

#include "override_common.h"
#include "rb-util.h"

#include "rb-entry-view.h"
#include "rb-plugin.h"
#include "rb-property-view.h"
#include "rb-remote-proxy.h"
#include "rb-shell.h"
#include "rb-shell-player.h"
#include "rb-source.h"
#include "rb-sourcelist.h"

void pyrb_register_classes (PyObject *d); 
void pyrb_add_constants (PyObject *module, const gchar *strip_prefix);

/* hacks to deal with the nonstandard class name RHYTHMDB */
#define RHYTHMDB_TYPE_RHYTHMDB RHYTHMDB_TYPE
#define RHYTHMDB_RHYTHMDB(o) RHYTHMDB(o)

%%
modulename rb 
%%
import gtk.Widget as PyGtkWidget_Type
import gobject.GObject as PyGObject_Type 
import gtk.VBox as PyGtkVBox_Type
import gtk.HBox as PyGtkHBox_Type
import gtk.Window as PyGtkWindow_Type
import gtk.ScrolledWindow as PyGtkScrolledWindow_Type
import gtk.TreeView as PyGtkTreeView_Type
import gtk.TreeViewColumn as PyGtkTreeViewColumn_Type
import gtk.gdk.Pixbuf as PyGdkPixbuf_Type

import rhythmdb.Entry as PyRhythmDBEntry_Type
import rhythmdb.PropertyModel as PyRhythmDBPropertyModel_Type
import rhythmdb.PropertyModelColumn as PyRhythmDBPropertyModelColumn_Type
import rhythmdb.PropType as PyRhythmDBPropType_Type
import rhythmdb.Query as PyRhythmDBQuery_Type
import rhythmdb.QueryModel as PyRhythmDBQueryModel_Type
import rhythmdb.QueryResults as PyRhythmDBQueryResults_Type
import rhythmdb.QueryType as PyRhythmDBQueryType_Type
import rhythmdb.RhythmDB as PyRhythmDB_Type
%%
ignore-glob
  *_get_type
  *_quark
%%
override rb_entry_view_get_selected_entries noargs
static PyObject *
_wrap_rb_entry_view_get_selected_entries(PyGObject *self)
{
    GList *list;
    PyObject *py_list;

    list = rb_entry_view_get_selected_entries (RB_ENTRY_VIEW(self->obj));
    py_list = _helper_wrap_pointer_glist (list, RHYTHMDB_TYPE_ENTRY);
    g_list_free (list);

    return py_list;
}
%%
override rb_source_get_property_views noargs
static PyObject *
_wrap_rb_source_get_property_views(PyGObject *self)
{
    GList *list;
    PyObject *py_list;

    list = rb_source_get_property_views (RB_SOURCE(self->obj));
    py_list = _helper_wrap_gobject_glist (list);
    g_list_free (list);

    return py_list;
}
%%
override rb_source_get_search_actions noargs
static PyObject *
_wrap_rb_source_get_search_actions(PyGObject *self)
{
    GList *list;
    PyObject *py_list;

    list = rb_source_get_search_actions (RB_SOURCE(self->obj));
    py_list = _helper_wrap_string_glist (list);
    g_list_free (list);

    return py_list;
}
%%
override rb_source_get_ui_actions noargs
static PyObject *
_wrap_rb_source_get_ui_actions(PyGObject *self)
{
    GList *list;
    PyObject *py_list;

    list = rb_source_get_ui_actions (RB_SOURCE(self->obj));
    py_list = _helper_wrap_string_glist (list);
    g_list_free (list);

    return py_list;
}
%%
override rb_source_cut noargs
static PyObject *
_wrap_rb_source_cut(PyGObject *self)
{
    GList *list;
    PyObject *py_list;

    list = rb_source_cut (RB_SOURCE(self->obj));
    py_list = _helper_wrap_pointer_glist (list, RHYTHMDB_TYPE_ENTRY);
    g_list_free (list);

    return py_list;
}
%%
override rb_source_copy noargs
static PyObject *
_wrap_rb_source_copy(PyGObject *self)
{
    GList *list;
    PyObject *py_list;

    list = rb_source_copy (RB_SOURCE(self->obj));
    py_list = _helper_wrap_pointer_glist (list, RHYTHMDB_TYPE_ENTRY);
    g_list_free (list);

    return py_list;
}
%%
override rb_source_paste kwargs
static PyObject *
_wrap_rb_source_paste(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "entries", NULL };
    PyObject *py_entries = NULL;
    GList *entries;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:RBSource.copy", kwlist, &py_entries))
        return NULL;

    entries = _helper_unwrap_string_pylist (py_entries);
    rb_source_paste (RB_SOURCE(self->obj), entries);
    rb_list_deep_free (entries);

    Py_INCREF(Py_None);
    return Py_None;
}
%%
override rb_source_gather_selected_properties kwargs
static PyObject *
_wrap_rb_source_gather_selected_properties(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "keys", NULL };
    PyObject *py_propid, *py_list;
    RhythmDBPropType propid;
    GList *list;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:RBSource.gather_selected_properties", kwlist, &py_propid))
        return NULL;
    if (pyg_enum_get_value(RHYTHMDB_TYPE_PROP_TYPE, py_propid, (gint *)&propid))
        return NULL;

    list = rb_source_gather_selected_properties (RB_SOURCE(self->obj), propid);
    py_list = _helper_wrap_string_glist (list);
    rb_list_deep_free (list);

    return py_list;
}
%%
override rb_property_view_set_selection kwargs
static PyObject *
_wrap_rb_property_view_set_selection(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "strings", NULL };
    PyObject *py_strings = NULL;
    GList *strings;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:RBPropertyView.set_selection", kwlist, &py_strings))
        return NULL;

    strings = _helper_unwrap_string_pylist (py_strings);
    rb_property_view_set_selection (RB_PROPERTY_VIEW(self->obj), strings);
    rb_list_deep_free (strings);

    Py_INCREF(Py_None);
    return Py_None;
}
%%
override rb_shell_player_get_volume noargs
static PyObject *
_wrap_rb_shell_player_get_volume(PyGObject *self)
{
    gdouble vol = 0.0;
    GError *error = NULL;

    rb_shell_player_get_volume(RB_SHELL_PLAYER(self->obj), &vol, &error);

    if (pyg_error_check(&error))
        return NULL;

    return PyFloat_FromDouble(vol);
}
%%
override rb_shell_player_get_mute noargs
static PyObject *
_wrap_rb_shell_player_get_mute(PyGObject *self)
{
    gboolean muted = FALSE;
    GError *error = NULL;

    rb_shell_player_get_mute(RB_SHELL_PLAYER(self->obj), &muted, &error);

    if (pyg_error_check(&error))
        return NULL;

    return PyBool_FromLong((long) muted);
}
%%
override rb_shell_player_get_playing noargs
static PyObject *
_wrap_rb_shell_player_get_playing(PyGObject *self)
{
    gboolean playing = FALSE;
    GError *error = NULL;

    rb_shell_player_get_playing(RB_SHELL_PLAYER(self->obj), &playing, &error);

    if (pyg_error_check(&error))
        return NULL;

    return PyBool_FromLong((long) playing);
}
%%
override rb_shell_player_get_playing_time noargs
static PyObject *
_wrap_rb_shell_player_get_playing_time(PyGObject *self)
{
    guint time = 0;
    GError *error = NULL;

    rb_shell_player_get_playing_time(RB_SHELL_PLAYER(self->obj), &time, &error);

    if (pyg_error_check(&error))
        return NULL;

    return PyLong_FromLong((long) time);
}
%%
override rb_shell_player_get_playing_path noargs
static PyObject *
_wrap_rb_shell_player_get_playing_path(PyGObject *self)
{
    char *path = NULL;
    GError *error = NULL;

    rb_shell_player_get_playing_path(RB_SHELL_PLAYER(self->obj), &path, &error);

    if (pyg_error_check(&error))
        return NULL;

    return PyString_FromString (path);
}
