%%
headers
#define NO_IMPORT_PYGOBJECT
#include <pygobject.h>
#include <pygtk/pygtk.h>

#include "override_common.h"

#include "rhythmdb.h"
#include "rhythmdb-property-model.h"
#include "rhythmdb-query-model.h"
#include "rhythmdb-query-results.h"

void pyrhythmdb_register_classes (PyObject *d); 
void pyrhythmdb_add_constants (PyObject *module, const gchar *strip_prefix);

/* hacks to deal with the nonstandard class name RHYTHMDB */
#define RHYTHMDB_TYPE_RHYTHMDB RHYTHMDB_TYPE
#define RHYTHMDB_RHYTHMDB(o) RHYTHMDB(o)

%%
modulename rhythmdb 
%%
import gtk.Widget as PyGtkWidget_Type
import gobject.GObject as PyGObject_Type 
import gtk.TreeView as PyGtkTreeView_Type
%%
ignore-glob
  *_get_type
  *_quark
%%
ignore
  rhythmdb_entry_get_string
  rhythmdb_entry_get_boolean
  rhythmdb_entry_get_uint64
  rhythmdb_entry_get_ulong
  rhythmdb_entry_get_double
  rhythmdb_query_model_tree_path_to_entry
  rhythmdb_query_model_iter_to_entry
%%
override rhythmdb_entry_get kwargs
static PyObject *
_wrap_rhythmdb_entry_get(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "propid", NULL };
    PyObject *py_propid = NULL;
    RhythmDBPropType propid;
    GValue value = {0,};
    PyObject *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:RhythmDBEntry.get", kwlist, &py_propid))
        return NULL;
    if (pyg_enum_get_value(RHYTHMDB_TYPE_PROP_TYPE, py_propid, (gint *)&propid))
        return NULL;
    rhythmdb_entry_get(pyg_pointer_get(self, RhythmDBEntry), propid, &value);
    ret = pyg_value_as_pyobject (&value, TRUE);
    g_value_unset (&value);
    if (ret)
        return ret;
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override rhythmdb_entry_set kwargs
static PyObject *
_wrap_rhythmdb_entry_set(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "entry", "propid", "value", NULL };
    PyObject *py_entry = NULL;
    PyObject *py_propid = NULL;
    PyObject *py_value = NULL;
    RhythmDBEntry *entry;
    RhythmDBPropType propid;
    GValue value = {0,};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:RhythmDBEntry.set", kwlist, &py_entry, &py_propid, &py_value))
        return NULL;
    if (pyg_pointer_check(py_entry, RHYTHMDB_TYPE_ENTRY))
        entry = pyg_pointer_get(py_entry, RhythmDBEntry);
    else {
        PyErr_SetString(PyExc_TypeError, "entry should be a RhythmDBEntry");
        return NULL;
    }
    if (pyg_enum_get_value(RHYTHMDB_TYPE_PROP_TYPE, py_propid, (gint *)&propid))
        return NULL;
    g_value_init(&value, rhythmdb_get_property_type (RHYTHMDB(self->obj), propid));
    if (pyg_value_from_pyobject(&value, py_value) < 0) {
        PyErr_SetString(PyExc_TypeError,
		"could not convert argument to correct param type");
        return NULL;
    }
    rhythmdb_entry_set(RHYTHMDB(self->obj), entry, propid, &value);
    g_value_unset (&value);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override rhythmdb_entry_set_nonotify kwargs
static PyObject *
_wrap_rhythmdb_entry_set_nonotify(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "entry", "propid", "value", NULL };
    PyObject *py_entry = NULL;
    PyObject *py_propid = NULL;
    PyObject *py_value = NULL;
    RhythmDBEntry *entry;
    RhythmDBPropType propid;
    GValue value = {0,};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:RhythmDBEntry.set_nonotify", kwlist, &py_entry, &py_propid, &py_value))
        return NULL;
    if (pyg_pointer_check(py_entry, RHYTHMDB_TYPE_ENTRY))
        entry = pyg_pointer_get(py_entry, RhythmDBEntry);
    else {
        PyErr_SetString(PyExc_TypeError, "entry should be a RhythmDBEntry");
        return NULL;
    }
    if (pyg_enum_get_value(RHYTHMDB_TYPE_PROP_TYPE, py_propid, (gint *)&propid))
        return NULL;
    g_value_init(&value, rhythmdb_get_property_type (RHYTHMDB(self->obj), propid));
    if (pyg_value_from_pyobject(&value, py_value) < 0) {
        PyErr_SetString(PyExc_TypeError,
		"could not convert argument to correct param type");
        return NULL;
    }
    rhythmdb_entry_set_nonotify(RHYTHMDB(self->obj), entry, propid, &value);
    g_value_unset (&value);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override rhythmdb_entry_set_uninserted kwargs
static PyObject *
_wrap_rhythmdb_entry_set_uninserted(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "entry", "propid", "value", NULL };
    PyObject *py_entry = NULL;
    PyObject *py_propid = NULL;
    PyObject *py_value = NULL;
    RhythmDBEntry *entry;
    RhythmDBPropType propid;
    GValue value = {0,};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:RhythmDBEntry.set_uninserted", kwlist, &py_entry, &py_propid, &py_value))
        return NULL;
    if (pyg_pointer_check(py_entry, RHYTHMDB_TYPE_ENTRY))
        entry = pyg_pointer_get(py_entry, RhythmDBEntry);
    else {
        PyErr_SetString(PyExc_TypeError, "entry should be a RhythmDBEntry");
        return NULL;
    }
    if (pyg_enum_get_value(RHYTHMDB_TYPE_PROP_TYPE, py_propid, (gint *)&propid))
        return NULL;
    g_value_init(&value, rhythmdb_get_property_type (RHYTHMDB(self->obj), propid));
    if (pyg_value_from_pyobject(&value, py_value) < 0) {
        PyErr_SetString(PyExc_TypeError,
		"could not convert argument to correct param type");
        return NULL;
    }
    rhythmdb_entry_set_uninserted(RHYTHMDB(self->obj), entry, propid, &value);
    g_value_unset (&value);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override rhythmdb_query_results_add_results kwargs
static PyObject*
_wrap_rhythmdb_query_results_add_results (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "entries", NULL };
    PyObject *py_entries = NULL;
    int size, i;
    GPtrArray *array;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O:RhythmDBQueryResults.add_results", kwlist, &py_entries))
        return NULL;

    array = g_ptr_array_new();
    size = PyList_Size(py_entries);
    for (i = 0; i < size; i++) {
        PyObject *py_entry;
        RhythmDBEntry *entry;

        py_entry = PyList_GetItem(py_entries, i);
        if (!pyg_pointer_check(py_entry, RHYTHMDB_TYPE_ENTRY)) {
            g_ptr_array_free(array, FALSE);
            return NULL;
        }

	entry = pyg_pointer_get(py_entry, RhythmDBEntry);
        g_ptr_array_add(array, entry);
    }

    rhythmdb_query_results_add_results (RHYTHMDB_QUERY_RESULTS(self->obj), array);
    g_ptr_array_free(array, FALSE);

    Py_INCREF(Py_None);
    return Py_None;

}
